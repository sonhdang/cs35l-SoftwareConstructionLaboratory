1.1
1. e m a c s SP e x e r 1 . h t m l 
2. C-s H T M L Enter
3. C-s s c a v e n g e r Enter
4. C-s s e l f - r e f e r e n t i a l Enter
5. C-s a r r o w
6. C-e
7. C-a
10. C-x C-c

1.2
1. e m a c s SP e x e r 2 . h t m l
2. 2. M-g g 1 8 Enter C-k
3. C-s D E Enter M-x k i l l - w h o l e - l i n e Enter
4. C-s h t t p s : / / e Enter C-a C-k
5. C-s < ! - - Enter C-a C-SP C-s - - > Enter C-w
   C-s < ! - - Enter C-a C-SP C-s - - > Enter C-w
   C-s < ! - - Enter C-a C-SP C-s - - > Enter C-w

1.3
1. emacs exer3.html
2. C-s A s s i g n m e n t SP 1 Enter Backspace 4 2
   C-s A s s i g n m e n t SP 1 Enter Backspace 4 2
3. M-< C-s U T F - 8 Enter M-Backspace M-Backspace U S - A S C I I
4. M-< M-x r e p l a c e - r e g e x p Enter [ ^ [ [ : a s c i i : ] ] Enter Enter
5. M-< < / o l > Enter Enter

1.4
1. cat exer2.html exer 2.diff >exer4.html
2. M-> M-v M-v M-v C-n C-n C-n C-f C-SP C-e M-w M-g g 1 8 Enter C-n C-y
   M-> M-v M-v M-v C-n C-n C-n C-n C-n C-n C-f C-SP C-e M-w M-g g 1 3 0 Enter C-y
   M-> M-v C-p C-p C-p C-p C-p C-f C-SP C-e M-w M-g g 3 6 9 Enter C-y M-g g 4 6 6 Enter C-f C-SP C-e M-w M-g g 3 7 0 Enter C-y Enter M-g g 4 6 8 Enter C-f C-SP C-e M-w M-g g 3 7 1 Enter C-y Enter
5. M-g g 4 3 4 C-SP M-> C-w
6. C-y
7. - - > M-g g 4 3 2 Enter < ! - -
8. M-x r e p l a c e - s t r i n g Enter < o l > Enter < o L > Enter

1.5
1. M-x m a k e - d i r e c t o r y Enter j u n k
2. M-x c d Enter j u n k Enter C-x C-f hello.c Enter
   Copy the file
   C-x C-s
3. M-x c o m p i l e Enter Backspace Backspace Backspace Backspace Backspace Backspace Backspace Backspace gcc SP - o SP h e l l o SP h e l l o . c Enter
4. C-x b hello-out Enter C-u M-! . / h e l l o Enter
5. EOF on input

1.6
1. e m a c s Enter C-x b Enter
2. m o s t - n e g a t i v e - f i x n u m C-j
   most-negative-fixnum = -2305843009213693952
   m o s t - p o s i t i v e - f i x n u m C-j
   most-positive-fixnum = 2305843009213693951
3. ( r a n d o m SP " 1 0 5 - 2 1 5 6 3 6 " )
   result = -951172712596742594
4. ( s e t q SP x SP ( r a n d o m ) ) C-j
   x = -1065037056789365406
   ( s e t q SP y SP ( r a n d o m ) ) C-j
   y = -189230161257333501
5. ( s e t q SP p SP ( * SP x SP y ) ) C-j
   p = 1488301973179109926
   ( l o g a n d SP p SP m o s t - p o s i t i v e - f i x n u m ) C-j
   r = 1488301973179109926
6. r is mathematically not the product of x and y
7. The two numbers are not truly random because in the EMACS Lisp documentation for "random", "a series of pseudo-random numbers is generated in a deterministic fashion."
8. Assuming (random) is truly random, the probability that the two-variable product mentioned above is the same as the probability that the product causes overflow. Because that is the only cuase that would make the result mathematically incorrect.

